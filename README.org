# Copier Template for Data Analysis and Writeup

TODO @abhi18av:
- git-submodules for various sun templates
- mlflow

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Copier](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/copier-org/copier/master/img/badge/badge-grayscale-inverted-border-orange.json)](https://github.com/copier-org/copier)
[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit)](https://github.com/pre-commit/pre-commit)

This is a template built with [Copier](https://github.com/copier-org/copier) to generate a data science focused python project.

Get started with the following command:

```shell
copier copy gh:abhi18av/template-analysis-and-writeup path/to/destination
```

## Features

### Core ideas

Analysis and Writeup
Clojure and Quarto

### Tools used in this template

1. Task runner - `just`
2. Programming languages and libraries
   1. R
   2. Python
   3. Clojure(Script)
   4. babashka/nbb
   5. Java
   6. Nushell
   7. Bash
   8. Wolfram
   9. OCaml
3. Notebooks
   1. Quarto (R, Python, ObservableJS)
   2. Mathematica
4. Dashboards
   1. Quarto (R, Python, ObservableJS)
5. Pipeline runner - `nextflow`
6. Package and environment management
   1. Pixi
   2. Renv
   3. Pip
   4. Clojure-CLI
7. Code and data version management
   1. Git
   2. Fossil
   3. Data Version Control
8. Data transfer and backup
   1. Rclone
   2. Restic
   3. ArtiVC
9. Writeup management (Manuscript, Report, Presentation)
   1. Quarto
   2. Typst
   3. Org-mode
10. Infrastructure management
    1. Terraform
    2. Dagger
    3. Nomad cluster
11. Utilities for editor, env management config
    1. .vscode
    2. .editorconfig
    3. .envrc
12. Project-level bin folder, pbin

### Project structure

It is assumed that most of the work will be done in Jupyter Notebooks.
However, the template also includes a python project, in which you can put functions and classes shared across notebooks.
The repository is set up to use [Pytest](https://docs.pytest.org/en/stable/) for unit testing this module code.

The template also includes a `data` directory whose contents will be ignored by git.
You can use this folder to store data that you do not commit.
You may also put a readme file in which you can document the source datasets you use and how to acquire them.

### [just](https://github.com/casey/just)

`just` is a command runner that allows you to easily to run project-specific commands.
In fact, you can use `just` to run all the setup commands listed below:

```shell
just setup
```

### [pre-commit](https://github.com/pre-commit/pre-commit)

pre-commit is a tool that runs checks on your files before you commit them with git, thereby helping ensure code quality.
Enable it with the following command:

```shell
pre-commit install --install-hooks
```

The configuration is stored in `.pre-commit-config.yaml`.

### Github Actions

You may optionally add a github workflow file which checks the following:

- uses ruff to check files are formatted and linted
- Runs unit tests and checks coverage
- Checks any markdown files are formatted with [markdownlint-cli2](https://github.com/DavidAnson/markdownlint-cli2)
- Checks that all jupyter notebooks are clean

### [Typos](https://github.com/crate-ci/typos)

Typos checks for common typos in code, aiming for a low false positive rate.
The repository is configured not to use it for Jupyter notebook files, as it tends to find errors in cell outputs.

Test with [Copier](https://github.com/copier-org/copier) and [copier-template-tester](https://github.com/KyleKing/copier-template-tester).
