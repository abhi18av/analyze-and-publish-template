// Tower-specific configuration for experiment tracking
// Configure workspaces, compute environments, and monitoring

tower {
    enabled = true
    
    // Authentication
    accessToken = System.getenv('TOWER_ACCESS_TOKEN')
    
    // Default workspace (can be overridden per experiment)
    workspaceId = System.getenv('TOWER_WORKSPACE_ID')
    
    // Endpoint (for enterprise installations)
    endpoint = System.getenv('TOWER_ENDPOINT') ?: 'https://tower.nf'
    
    // Request configuration
    requestConfig {
        // Timeout settings for Tower API calls
        timeout = '30s'
        retries = 3
    }
}

// Profile-specific Tower configurations
profiles {
    
    // Development workspace configuration
    dev {
        tower.workspaceId = System.getenv('TOWER_DEV_WORKSPACE_ID')
        
        // Use spot instances for cost efficiency in development
        process.executor = 'awsbatch'
        process.queue = 'dev-spot-queue'
        
        // Reduced resource limits for development
        params.max_cpus = 8
        params.max_memory = '32.GB'
        params.max_time = '12.h'
    }
    
    // Production workspace configuration
    prod {
        tower.workspaceId = System.getenv('TOWER_PROD_WORKSPACE_ID')
        
        // Use on-demand instances for reliability in production
        process.executor = 'awsbatch'
        process.queue = 'prod-ondemand-queue'
        
        // Higher resource limits for production
        params.max_cpus = 32
        params.max_memory = '128.GB'
        params.max_time = '48.h'
    }
    
    // Testing workspace configuration
    test {
        tower.workspaceId = System.getenv('TOWER_TEST_WORKSPACE_ID')
        
        // Local execution for testing
        process.executor = 'local'
        
        // Minimal resources for testing
        params.max_cpus = 2
        params.max_memory = '8.GB'
        params.max_time = '2.h'
        
        // Test data paths
        params.input = './test_data/*.csv'
        params.output_dir = './test_results'
    }
}

// Experiment tracking parameters
params {
    // Tower-specific parameters
    tower_workspace = System.getenv('TOWER_WORKSPACE_ID')
    tower_compute_env = System.getenv('TOWER_COMPUTE_ENV')
    
    // Experiment metadata for Tower
    experiment_tags = []
    experiment_description = 'Academic research pipeline'
    
    // Resume configuration
    resume_from_tower_id = null
    resume_work_dir = null
    
    // Notification settings
    notification_email = System.getenv('NOTIFICATION_EMAIL')
    notification_slack = System.getenv('NOTIFICATION_SLACK_WEBHOOK')
}

// AWS-specific settings (if using AWS Batch)
aws {
    client {
        // Retry configuration for AWS API calls
        maxErrorRetry = 3
        uploadChunkSize = 100.MB
        uploadMaxThreads = 5
        uploadRetrySleep = 100
        uploadMaxAttempts = 5
    }
    
    batch {
        // Job queue and definition settings
        cliPath = '/usr/local/aws-cli/v2/current/bin/aws'
        
        // Volume mounts for data access
        volumes = [
            '/tmp:/tmp:rw',
            '/var/lib/docker:/var/lib/docker:rw'
        ]
    }
}

// Docker settings (if using containers)
docker {
    enabled = true
    userEmulation = true
    sudo = false
    
    // Registry settings
    registry = 'your-registry.com'
    
    // Run options
    runOptions = '--rm --user $(id -u):$(id -g)'
}

// Singularity settings (alternative to Docker)
singularity {
    enabled = false
    autoMounts = true
    
    // Cache directory
    cacheDir = "${HOME}/.singularity/cache"
}

// Error handling for resumable experiments
process {
    // Retry configuration for failed processes
    errorStrategy = { task.exitStatus in [104,134,137,139,143,247] ? 'retry' : 'terminate' }
    maxRetries = 3
    
    // Resource increase on retry
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
}

// Helper function to check resource limits
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
