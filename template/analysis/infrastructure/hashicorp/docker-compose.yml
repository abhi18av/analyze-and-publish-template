version: '3.8'

# HashiCorp Stack Integration
# This docker-compose file brings together Vault, Consul, and Nomad
# for a complete infrastructure management platform

services:
  # HashiCorp Consul - Service Discovery and Configuration
  consul:
    image: hashicorp/consul:latest
    container_name: consul
    hostname: consul
    ports:
      - "8500:8500"  # HTTP API
      - "8600:8600/udp"  # DNS
    volumes:
      - consul_data:/consul/data
      - ./consul/consul.hcl:/consul/config/consul.hcl:ro
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    command: consul agent -config-file=/consul/config/consul.hcl
    networks:
      - hashicorp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HashiCorp Vault - Secrets Management
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    hostname: vault
    ports:
      - "8200:8200"  # API
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - ./vault/vault.hcl:/vault/config/vault.hcl:ro
    environment:
      - VAULT_ADDR=http://127.0.0.1:8200
      - VAULT_API_ADDR=http://127.0.0.1:8200
    command: vault server -config=/vault/config/vault.hcl
    cap_add:
      - IPC_LOCK
    networks:
      - hashicorp
    restart: unless-stopped
    depends_on:
      consul:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # HashiCorp Nomad - Workload Orchestration
  nomad:
    image: hashicorp/nomad:latest
    container_name: nomad
    hostname: nomad
    ports:
      - "4646:4646"  # HTTP API
      - "4647:4647"  # RPC
      - "4648:4648"  # Serf
    volumes:
      - nomad_data:/nomad/data
      - /var/run/docker.sock:/var/run/docker.sock
      - ./nomad/nomad.hcl:/nomad/config/nomad.hcl:ro
    environment:
      - NOMAD_ADDR=http://127.0.0.1:4646
    command: nomad agent -config=/nomad/config/nomad.hcl
    privileged: true  # Required for Docker driver
    networks:
      - hashicorp
    restart: unless-stopped
    depends_on:
      consul:
        condition: service_healthy
      vault:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nomad", "node", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # Traefik - Load Balancer and Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: traefik
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/data
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.consul.endpoints=consul:8500
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=admin@example.com
      - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    networks:
      - hashicorp
    restart: unless-stopped
    depends_on:
      - consul
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.local`)"

  # PostgreSQL - Database for applications
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=template_analysis
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secure_password
    networks:
      - hashicorp
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d template_analysis"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Caching and Session Store
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - hashicorp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO - S3-compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    command: server /data --console-address ":9001"
    networks:
      - hashicorp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - hashicorp
    restart: unless-stopped
    depends_on:
      - consul
      - vault
      - nomad

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - hashicorp
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jupyter Lab - Data Science Environment
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: jupyter
    ports:
      - "8888:8888"
    volumes:
      - jupyter_data:/home/jovyan/work
      - ./jupyter/jupyter_notebook_config.py:/home/jovyan/.jupyter/jupyter_notebook_config.py:ro
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=data-science-token-123
      - GRANT_SUDO=yes
    user: root
    networks:
      - hashicorp
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jupyter.rule=Host(`jupyter.local`)"
      - "traefik.http.services.jupyter.loadbalancer.server.port=8888"

volumes:
  consul_data:
    driver: local
  vault_data:
    driver: local
  vault_logs:
    driver: local
  nomad_data:
    driver: local
  traefik_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jupyter_data:
    driver: local

networks:
  hashicorp:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
