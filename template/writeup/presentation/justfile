# === Default Task ===
default:
    @just --list

# Presentation Management Tasks

# === Setup and Initialization ===


# NOTE:
# HTML quarto use template grantmcdermott/quarto-revealjs-clean
# TYPST quarto use template kazuyanagimoto/quarto-clean-typst

presentation-init: # Initialize presentation project structure
    mkdir -p src assets/{figures,tables,graphics} _output/{pdf,html,pptx}/{draft,final} presentations templates
    touch _quarto.yml

# === Rendering and Preview ===

presentation-render format="pdf" version="draft": # Render presentation
    quarto render src/index.qmd --to {{format}} --output-dir _output/{{format}}/{{version}}

presentation-preview: # Preview presentation with live reload
    quarto preview src/index.qmd

presentation-clean: # Clean generated files
    rm -rf _output/*

# === Template-based Creation ===

create-academic name: # Create academic presentation
    #!/usr/bin/env bash
    mkdir -p "presentations/{{name}}"
    cp templates/academic/academic_template.qmd "presentations/{{name}}/{{name}}.qmd"
    echo "Created academic presentation in presentations/{{name}}/"

create-corporate name: # Create corporate presentation
    #!/usr/bin/env bash
    mkdir -p "presentations/{{name}}"
    cp templates/corporate/corporate_template.qmd "presentations/{{name}}/{{name}}.qmd"
    echo "Created corporate presentation in presentations/{{name}}/"

create-workshop name: # Create workshop presentation
    #!/usr/bin/env bash
    mkdir -p "presentations/{{name}}"
    cp templates/workshop/workshop_template.qmd "presentations/{{name}}/{{name}}.qmd"
    echo "Created workshop presentation in presentations/{{name}}/"

create-poster name: # Create academic poster
    #!/usr/bin/env bash
    mkdir -p "presentations/posters/{{name}}"
    cp templates/poster/poster_template.qmd "presentations/posters/{{name}}/{{name}}.qmd"
    echo "Created academic poster in presentations/posters/{{name}}/"

# === Rendering Presentations ===

render-presentation name format="revealjs" version="draft": # Render a specific presentation
    #!/usr/bin/env bash
    if [ -f "presentations/{{name}}/{{name}}.qmd" ]; then
        mkdir -p "_output/{{format}}/{{version}}/{{name}}"
        quarto render "presentations/{{name}}/{{name}}.qmd" --to {{format}} --output-dir "_output/{{format}}/{{version}}/{{name}}"
        echo "Rendered {{name}} to _output/{{format}}/{{version}}/{{name}}"
    else
        echo "Error: Presentation {{name}} not found"
    fi

render-poster name format="pdf" version="draft": # Render a specific poster
    #!/usr/bin/env bash
    if [ -f "presentations/posters/{{name}}/{{name}}.qmd" ]; then
        mkdir -p "_output/posters/{{format}}/{{version}}/{{name}}"
        quarto render "presentations/posters/{{name}}/{{name}}.qmd" --to {{format}} --output-dir "_output/posters/{{format}}/{{version}}/{{name}}"
        echo "Rendered poster {{name}} to _output/posters/{{format}}/{{version}}/{{name}}"
    else
        echo "Error: Poster {{name}} not found"
    fi

# === Utility Functions ===

list-presentations: # List all presentations
    @echo "Available presentations:"
    @find presentations -name "*.qmd" | sort

list-posters: # List all posters
    @echo "Available posters:"
    @find presentations/posters -name "*.qmd" | sort

clone-presentation source target: # Clone a presentation to create a new version
    #!/usr/bin/env bash
    if [ -f "presentations/{{source}}/{{source}}.qmd" ]; then
        mkdir -p "presentations/{{target}}"
        cp -r "presentations/{{source}}/"* "presentations/{{target}}/"
        if [ -f "presentations/{{target}}/{{source}}.qmd" ]; then
            mv "presentations/{{target}}/{{source}}.qmd" "presentations/{{target}}/{{target}}.qmd"
        fi
        echo "Cloned {{source}} to {{target}}"
    else
        echo "Error: Source presentation {{source}} not found"
    fi
